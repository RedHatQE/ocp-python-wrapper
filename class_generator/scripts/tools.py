import os
from typing import Dict, List

import click


def get_generated_files() -> Dict[str, List[str]]:
    """
    Get all files that was generated by `class_generator`

    Returns:
        dict: A dictionary with two keys, `with_end_comment` and `without_end_comment`, and their values are lists of file paths.
            `with_end_comment` files have end comment in the code which mean is was generated with the latest `class_generator` code.
            `without_end_comment` files don't have end comment in the code which mean is was generated with the old `class_generator` code and need to be regenerated.
    """
    start_comment: str = (
        "# Generated using https://github.com/RedHatQE/openshift-python-wrapper/blob/main/scripts/resource/README.md"
    )
    end_comment: str = "# End of generated code"
    file_list_with_end_comment: List[str] = []
    file_list_without_end_comment: List[str] = []
    for root, _, files in os.walk("ocp_resources"):
        for _file in files:
            if _file.endswith(".py"):
                file_path = os.path.join(root, _file)
                with open(file_path) as fd:
                    content = fd.read()
                    if start_comment in content and end_comment in content:
                        file_list_with_end_comment.append(file_path)
                    elif start_comment in content:
                        file_list_without_end_comment.append(file_path)

    return {"with_end_comment": file_list_with_end_comment, "without_end_comment": file_list_without_end_comment}


@click.command("class-geberator-tools")
@click.option(
    "--list-generated_file",
    is_flag=True,
    help="List all generated files by `class_generator` under `ocp_resources` directory",
)
def main(list_generated_file: bool) -> Dict[str, List[str]]:
    if list_generated_file:
        res = get_generated_files()
        click.echo(f"Generated files with end comment:\n\t{'\n\t'.join(res['with_end_comment'])}\n")
        click.echo(f"Generated files without end comment:\n\t{'\n\t'.join(res['without_end_comment'])}\n")
    return {}


if __name__ == "__main__":
    main()
