{
  "description": "ClusterCatalog is the Schema for the ClusterCatalogs API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ClusterCatalogSpec defines the desired state of ClusterCatalog",
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "description": "Source is the source of a Catalog that contains Operators' metadata in the FBC format\nhttps://olm.operatorframework.io/docs/reference/file-based-catalogs/#docs",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "image": {
              "description": "Image is the catalog image that backs the content of this catalog.",
              "type": "object",
              "required": [
                "ref"
              ],
              "properties": {
                "insecureSkipTLSVerify": {
                  "description": "InsecureSkipTLSVerify indicates that TLS certificate validation should be skipped.\nIf this option is specified, the HTTPS protocol will still be used to\nfetch the specified image reference.\nThis should not be used in a production environment.",
                  "type": "boolean"
                },
                "pollInterval": {
                  "description": "PollInterval indicates the interval at which the image source should be polled for new content,\nspecified as a duration (e.g., \"5m\", \"1h\", \"24h\", \"etc\".). Note that PollInterval may not be\nspecified for a catalog image referenced by a sha256 digest.",
                  "type": "string",
                  "format": "duration"
                },
                "pullSecret": {
                  "description": "PullSecret contains the name of the image pull secret in the namespace that catalogd is deployed.",
                  "type": "string"
                },
                "ref": {
                  "description": "Ref contains the reference to a container image containing Catalog contents.",
                  "type": "string"
                }
              }
            },
            "type": {
              "description": "Type defines the kind of Catalog content being sourced.",
              "type": "string",
              "enum": [
                "image"
              ]
            }
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "message": "cannot specify PollInterval while using digest-based image",
          "rule": "!has(self.source.image.pollInterval) || (self.source.image.ref.find('@sha256:') == \"\")"
        }
      ]
    },
    "status": {
      "description": "ClusterCatalogStatus defines the observed state of ClusterCatalog",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions store the status conditions of the ClusterCatalog instances",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        },
        "contentURL": {
          "description": "ContentURL is a cluster-internal address that on-cluster components\ncan read the content of a catalog from",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this ClusterCatalog. It corresponds to the\nClusterCatalog's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "phase": {
          "description": "Phase represents a human-readable status of resolution of the content source.\nIt is not appropriate to use for business logic determination.",
          "type": "string"
        },
        "resolvedSource": {
          "description": "ResolvedSource contains information about the resolved source",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "image": {
              "description": "Image is the catalog image that backs the content of this catalog.",
              "type": "object",
              "required": [
                "lastPollAttempt",
                "ref",
                "resolvedRef"
              ],
              "properties": {
                "lastPollAttempt": {
                  "description": "LastPollAtempt is the time when the source resolved was last polled for new content.",
                  "type": "string",
                  "format": "date-time"
                },
                "pullSecret": {
                  "description": "pullSecret exists to retain compatibility with the existing v1alpha1 APIs. It will be removed in v1alpha2.",
                  "type": "string"
                },
                "ref": {
                  "description": "Ref contains the reference to a container image containing Catalog contents.",
                  "type": "string"
                },
                "resolvedRef": {
                  "description": "ResolvedRef contains the resolved sha256 image ref containing Catalog contents.",
                  "type": "string"
                }
              }
            },
            "type": {
              "description": "Type defines the kind of Catalog content that was sourced.",
              "type": "string"
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "catalogd.operatorframework.io",
      "kind": "ClusterCatalog",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}