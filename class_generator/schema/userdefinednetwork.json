{
  "description": "UserDefinedNetwork describe network request for a Namespace.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "UserDefinedNetworkSpec defines the desired state of UserDefinedNetworkSpec.",
      "type": "object",
      "required": [
        "topology"
      ],
      "properties": {
        "layer2": {
          "description": "Layer2 is the Layer2 topology configuration.",
          "type": "object",
          "required": [
            "role"
          ],
          "properties": {
            "ipamLifecycle": {
              "description": "IPAMLifecycle controls IP addresses management lifecycle.\n\n\nThe only allowed value is Persistent. When set, OVN Kubernetes assigned IP addresses will be persisted in an\n`ipamclaims.k8s.cni.cncf.io` object. These IP addresses will be reused by other pods if requested.\nOnly supported when \"subnets\" are set.",
              "type": "string",
              "enum": [
                "Persistent"
              ]
            },
            "joinSubnets": {
              "description": "JoinSubnets are used inside the OVN network topology.\n\n\nDual-stack clusters may set 2 subnets (one for each IP family), otherwise only 1 subnet is allowed.\nThis field is only allowed for \"Primary\" network.\nIt is not recommended to set this field without explicit need and understanding of the OVN network topology.\nWhen omitted, the platform will choose a reasonable default which is subject to change over time.",
              "type": "array",
              "maxItems": 2,
              "minItems": 1,
              "items": {
                "type": "string",
                "x-kubernetes-validations": [
                  {
                    "message": "CIDR is invalid",
                    "rule": "isCIDR(self)"
                  }
                ]
              },
              "x-kubernetes-validations": [
                {
                  "message": "When 2 CIDRs are set, they must be from different IP families",
                  "rule": "size(self) != 2 || isCIDR(self[0]) && isCIDR(self[1]) && cidr(self[0]).ip().family() != cidr(self[1]).ip().family()"
                }
              ]
            },
            "mtu": {
              "description": "MTU is the maximum transmission unit for a network.\nMTU is optional, if not provided, the globally configured value in OVN-Kubernetes (defaults to 1400) is used for the network.",
              "type": "integer",
              "format": "int32",
              "maximum": 65536,
              "minimum": 0
            },
            "role": {
              "description": "Role describes the network role in the pod.\n\n\nAllowed value is \"Secondary\".\nSecondary network is only assigned to pods that use `k8s.v1.cni.cncf.io/networks` annotation to select given network.",
              "type": "string",
              "enum": [
                "Primary",
                "Secondary"
              ]
            },
            "subnets": {
              "description": "Subnets are used for the pod network across the cluster.\nDual-stack clusters may set 2 subnets (one for each IP family), otherwise only 1 subnet is allowed.\n\n\nThe format should match standard CIDR notation (for example, \"10.128.0.0/16\").\nThis field may be omitted. In that case the logical switch implementing the network only provides layer 2 communication,\nand users must configure IP addresses for the pods. As a consequence, Port security only prevents MAC spoofing.",
              "type": "array",
              "maxItems": 2,
              "minItems": 1,
              "items": {
                "type": "string",
                "x-kubernetes-validations": [
                  {
                    "message": "CIDR is invalid",
                    "rule": "isCIDR(self)"
                  }
                ]
              },
              "x-kubernetes-validations": [
                {
                  "message": "When 2 CIDRs are set, they must be from different IP families",
                  "rule": "size(self) != 2 || isCIDR(self[0]) && isCIDR(self[1]) && cidr(self[0]).ip().family() != cidr(self[1]).ip().family()"
                }
              ]
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "Subnets is required for Primary Layer2 topology",
              "rule": "self.role != 'Primary' || has(self.subnets) && size(self.subnets) > 0"
            },
            {
              "message": "JoinSubnets is only supported for Primary network",
              "rule": "!has(self.joinSubnets) || has(self.role) && self.role == 'Primary'"
            },
            {
              "message": "IPAMLifecycle is only supported when subnets are set",
              "rule": "!has(self.ipamLifecycle) || has(self.subnets) && size(self.subnets) > 0"
            }
          ]
        },
        "layer3": {
          "description": "Layer3 is the Layer3 topology configuration.",
          "type": "object",
          "required": [
            "role"
          ],
          "properties": {
            "joinSubnets": {
              "description": "JoinSubnets are used inside the OVN network topology.\n\n\nDual-stack clusters may set 2 subnets (one for each IP family), otherwise only 1 subnet is allowed.\nThis field is only allowed for \"Primary\" network.\nIt is not recommended to set this field without explicit need and understanding of the OVN network topology.\nWhen omitted, the platform will choose a reasonable default which is subject to change over time.",
              "type": "array",
              "maxItems": 2,
              "minItems": 1,
              "items": {
                "type": "string",
                "x-kubernetes-validations": [
                  {
                    "message": "CIDR is invalid",
                    "rule": "isCIDR(self)"
                  }
                ]
              },
              "x-kubernetes-validations": [
                {
                  "message": "When 2 CIDRs are set, they must be from different IP families",
                  "rule": "size(self) != 2 || isCIDR(self[0]) && isCIDR(self[1]) && cidr(self[0]).ip().family() != cidr(self[1]).ip().family()"
                }
              ]
            },
            "mtu": {
              "description": "MTU is the maximum transmission unit for a network.\n\n\nMTU is optional, if not provided, the globally configured value in OVN-Kubernetes (defaults to 1400) is used for the network.",
              "type": "integer",
              "format": "int32",
              "maximum": 65536,
              "minimum": 0
            },
            "role": {
              "description": "Role describes the network role in the pod.\n\n\nAllowed values are \"Primary\" and \"Secondary\".\nPrimary network is automatically assigned to every pod created in the same namespace.\nSecondary network is only assigned to pods that use `k8s.v1.cni.cncf.io/networks` annotation to select given network.",
              "type": "string",
              "enum": [
                "Primary",
                "Secondary"
              ]
            },
            "subnets": {
              "description": "Subnets are used for the pod network across the cluster.\n\n\nDual-stack clusters may set 2 subnets (one for each IP family), otherwise only 1 subnet is allowed.\nGiven subnet is split into smaller subnets for every node.",
              "type": "array",
              "maxItems": 2,
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "cidr": {
                    "description": "CIDR specifies L3Subnet, which is split into smaller subnets for every node.",
                    "type": "string",
                    "x-kubernetes-validations": [
                      {
                        "message": "CIDR is invalid",
                        "rule": "isCIDR(self)"
                      }
                    ]
                  },
                  "hostSubnet": {
                    "description": "HostSubnet specifies the subnet size for every node.\n\n\nWhen not set, it will be assigned automatically.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 127,
                    "minimum": 1
                  }
                },
                "x-kubernetes-validations": [
                  {
                    "message": "HostSubnet must be smaller than CIDR subnet",
                    "rule": "!has(self.hostSubnet) || (isCIDR(self.cidr) && self.hostSubnet > cidr(self.cidr).prefixLength())"
                  },
                  {
                    "message": "HostSubnet must < 32 for ipv4 CIDR",
                    "rule": "!has(self.hostSubnet) || (isCIDR(self.cidr) && (cidr(self.cidr).ip().family() == 6 || self.hostSubnet < 32))"
                  }
                ]
              },
              "x-kubernetes-validations": [
                {
                  "message": "When 2 CIDRs are set, they must be from different IP families",
                  "rule": "size(self) != 2 || isCIDR(self[0].cidr) && isCIDR(self[1].cidr) && cidr(self[0].cidr).ip().family() != cidr(self[1].cidr).ip().family()"
                }
              ]
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "Subnets is required for Layer3 topology",
              "rule": "has(self.subnets) && size(self.subnets) > 0"
            },
            {
              "message": "JoinSubnets is only supported for Primary network",
              "rule": "!has(self.joinSubnets) || has(self.role) && self.role == 'Primary'"
            }
          ]
        },
        "localNet": {
          "description": "LocalNet is the LocalNet topology configuration.",
          "type": "object",
          "required": [
            "role"
          ],
          "properties": {
            "excludeSubnets": {
              "description": "ExcludeSubnets is a list of CIDRs that will be removed from the assignable IP address pool specified by the \"Subnets\" field.\n\n\nThis field is supported only when \"Subnets\" field is set.\n\n\nIn case the subject local network provides various services (e.g.: DHCP server, data-base) their addresses can be excluded\nfrom the IP addresses pool OVN-Kubernetes will use for the subject network workloads (specified by \"Subnets\" field).",
              "type": "array",
              "maxItems": 25,
              "minItems": 1,
              "items": {
                "type": "string",
                "x-kubernetes-validations": [
                  {
                    "message": "CIDR is invalid",
                    "rule": "isCIDR(self)"
                  }
                ]
              }
            },
            "ipamLifecycle": {
              "description": "IPAMLifecycle controls IP addresses management lifecycle.\n\n\nThe only allowed value is Persistent. When set, OVN Kubernetes assigned IP addresses will be persisted in an\n`ipamclaims.k8s.cni.cncf.io` object. These IP addresses will be reused by other pods if requested.\nOnly supported when \"subnets\" are set.",
              "type": "string",
              "enum": [
                "Persistent"
              ]
            },
            "mtu": {
              "description": "MTU is the maximum transmission unit for a network.\n\n\nMTU is optional, if not provided, the globally configured value in OVN-Kubernetes (defaults to 1400) is used for the network.",
              "type": "integer",
              "format": "int32",
              "maximum": 65536,
              "minimum": 0
            },
            "role": {
              "description": "Role describes the network role in the pod.\n\n\nAllowed values are \"Primary\" and \"Secondary\".\nMust be set to \"Secondary\".",
              "type": "string",
              "enum": [
                "Primary",
                "Secondary"
              ]
            },
            "subnets": {
              "description": "Subnets are used for the pod network across the cluster.\n\n\nDual-stack clusters may set 2 subnets (one for each IP family), otherwise only 1 subnet is allowed.\nThe format should match standard CIDR notation <example>.\nThis field may be omitted.\nIn that case the logical switch implementing the network only provides layer 2 communication,\nand users must configure IP addresses for the pods. As a consequence, Port security only prevents MAC spoofing.",
              "type": "array",
              "maxItems": 2,
              "minItems": 1,
              "items": {
                "type": "string",
                "x-kubernetes-validations": [
                  {
                    "message": "CIDR is invalid",
                    "rule": "isCIDR(self)"
                  }
                ]
              },
              "x-kubernetes-validations": [
                {
                  "message": "When 2 CIDRs are set, they must be from different IP families",
                  "rule": "size(self) != 2 || isCIDR(self[0]) && isCIDR(self[1]) && cidr(self[0]).ip().family() != cidr(self[1]).ip().family()"
                }
              ]
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "LocalNet topology is only supported for Secondary network",
              "rule": "self.role == 'Secondary'"
            },
            {
              "message": "ExcludeSubnets is only supported when Subnets is provided",
              "rule": "!has(self.excludeSubnets) || has(self.subnets) && size(self.subnets) > 0"
            },
            {
              "message": "IPAMLifecycle is only supported when subnets are set",
              "rule": "!has(self.ipamLifecycle) || has(self.subnets) && size(self.subnets) > 0"
            }
          ]
        },
        "topology": {
          "description": "Topology describes network configuration.\n\n\nAllowed values are \"Layer3\", \"Layer2\", \"LocalNet\".\nLayer3 topology creates a layer 2 segment per node, each with a different subnet. Layer 3 routing is used to interconnect node subnets.\nLayer2 topology creates one logical switch shared by all nodes.\nLocalNet topology creates a cluster-wide logical switch connected to a physical network.",
          "type": "string",
          "enum": [
            "Layer2",
            "Layer3",
            "LocalNet"
          ]
        }
      },
      "x-kubernetes-validations": [
        {
          "message": "Spec is immutable",
          "rule": "self == oldSelf"
        },
        {
          "message": "spec.layer3 is required when topology is Layer3 and forbidden otherwise",
          "rule": "has(self.topology) && self.topology == 'Layer3' ? has(self.layer3): !has(self.layer3)"
        },
        {
          "message": "spec.layer2 is required when topology is Layer2 and forbidden otherwise",
          "rule": "has(self.topology) && self.topology == 'Layer2' ? has(self.layer2): !has(self.layer2)"
        },
        {
          "message": "spec.localNet is required when topology is LocalNet and forbidden otherwise",
          "rule": "has(self.topology) && self.topology == 'LocalNet' ? has(self.localNet): !has(self.localNet)"
        }
      ]
    },
    "status": {
      "description": "UserDefinedNetworkStatus contains the observed status of the UserDefinedNetwork.",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": "object",
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "k8s.ovn.org",
      "kind": "UserDefinedNetwork",
      "version": "v1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}